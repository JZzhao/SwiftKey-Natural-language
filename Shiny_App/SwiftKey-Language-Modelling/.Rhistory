shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dat <- data.frame(x = numeric(0), y = numeric(0))
dat
for (i in 1:10) {
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
incProgress(0.1, detail = paste(":", i*10,"%"))
Sys.sleep(0.5)
}
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
dat
shiny::runApp()
source('Task_5.5_Predict_func.R')
ls()
predictNgrams('How are you')
?reactive
values <- reactiveValues(A=1)
values
dataInput <- reactive(predictNgrams('input$entry'))
dataInput
dataInput[]
dataInput[](1)
dataInput[1]
values
reactiveB <- reactive({
values$A + 1
})
reactiveB
reactiveC <- reactive(quote({ values$A + 2 }), quoted = TRUE)
reactiveC
expr_q <- quote({ values$A + 3 })
ex
expr_q
isolate(reactiveB())
reactiveB()[1]
reactiveB()
isolate(reactiveB())
reactiveB
isolate(dataInput[])
isolate(dataInput())
isolate(dataInput(1))
isolate(dataInput()[1])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
system.time(a <- predictNgrams('how are you'))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
),
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ls()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ls()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ls()
save(tail(Quatrgrams_model, 50), file='quatrgrams_model.RData')
a <- tail(Quatrgrams_model, 50)
Quatrgrams_model <- tail(Quatrgrams_model, 50)
save(Quatrgrams_model, file='quatrgrams_model.RData')
Quatrgrams_models <- tail(Quatrgrams_model, 50)
Quatrgrams_models
save(Quatrgrams_models, file='quatrgrams_model.RData')
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
predictWordcloud <- function(input){
## clean input text
# remove numbers, punctuations
word <- gsub("[^a-zA-Z\n\']", " ", input)
# convert all words to lowercase
word <- tolower(word)
# remove extra spaces
trim <- function(x) return(gsub("^ *|(?<= ) | *$", "", x, perl=T))
word<-trim(word)
str <- unlist(str_split(word," "))
len <- length(str)
predict <- data.frame(ngram.freq=0,ngram.pred="")
if (len>=3){
##trigram
W1 <- str[len-2]; W2 <- str[len-1]; W3 <- str[len]
ngram <- Quatrgrams_model[list(W1, W2, W3)]
predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
if(length(predict)<6){
##bigram
ngram <- Trigrams_model[list(W2, W3)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
if(length(predict)<6){
##unigram
ngram <- Bigrams_model[list(W3)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
}else if(len==2){
W1 <- str[len-1]; W2 <- str[len]
ngram <- Trigrams_model[list(W1, W2)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
if(length(predict)<6){
##unigram
ngram <- Bigrams_model[list(W2)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
}else if(len==1){
W1 <- str[len]
ngram <- Bigrams_model[list(W1)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
if(length(predict)<5){
ngram <- Unigrams_model
predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
return(predict)
}
ls()
input <- 'how are you'
a <- predictWordcloud(input)
a
dim(a)
?wordcloud
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
brewer.pal(8, "Dark2")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('shinyapps')
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("Rmpi")
install.packages(c("cluster", "KernSmooth", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
shiny::runApp()
transition: linear
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
terms <- reactive({
isolate({predictWordcloud("How are youo")})
})
terms
v <- terms()
terms <- reactive({
isolate({predictWordcloud("How are you")})
})
v <- terms()
terms <- reactive({
input$update
isolate({predictWordcloud("How are you")})
})
v <- terms()
require(stringr); require(data.table)
predictWordcloud <- function(input){
## clean input text
# remove numbers, punctuations
word <- gsub("[^a-zA-Z\n\']", " ", input)
# convert all words to lowercase
word <- tolower(word)
# remove extra spaces
trim <- function(x) return(gsub("^ *|(?<= ) | *$", "", x, perl=T))
word<-trim(word)
str <- unlist(str_split(word," "))
len <- length(str)
predict <- data.frame(ngram.freq=0,ngram.pred="")
if (len>=3){
##trigram
W1 <- str[len-2]; W2 <- str[len-1]; W3 <- str[len]
ngram <- Quatrgrams_model[list(W1, W2, W3)]
predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
if(nrow(predict)<6){
##bigram
ngram <- Trigrams_model[list(W2, W3)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
if(nrow(predict)<6){
##unigram
ngram <- Bigrams_model[list(W3)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
}else if(len==2){
W1 <- str[len-1]; W2 <- str[len]
ngram <- Trigrams_model[list(W1, W2)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
if(nrow(predict)<6){
##unigram
ngram <- Bigrams_model[list(W2)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
}else if(len==1){
W1 <- str[len]
ngram <- Bigrams_model[list(W1)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
if(nrow(predict)<5){
ngram <- Unigrams_model
predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
return(predict)
}
predictWordcloud(
"How are you")
predictWordcloud(
"How are youo")
!is.na(predict)
!is.na(predict[,1])
is.na(predict[,1])
predict
a <- predictWordcloud(
"How are youo")
a
is.na(a[,1])
a[!is.na(a[,1]),]
a[!is.na(a[,2]),]
shiny::runApp()
a
a[!is.na(a[,2]),]
b <- a[!is.na(a[,2]),]
b
b <- b[-1,]
b
require(stringr); require(data.table)
predictWordcloud <- function(input){
## clean input text
# remove numbers, punctuations
word <- gsub("[^a-zA-Z\n\']", " ", input)
# convert all words to lowercase
word <- tolower(word)
# remove extra spaces
trim <- function(x) return(gsub("^ *|(?<= ) | *$", "", x, perl=T))
word<-trim(word)
str <- unlist(str_split(word," "))
len <- length(str)
predict <- data.frame(ngram.freq=0,ngram.pred="")
if (len>=3){
##trigram
W1 <- str[len-2]; W2 <- str[len-1]; W3 <- str[len]
ngram <- Quatrgrams_model[list(W1, W2, W3)]
predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
if(nrow(predict)<6){
##bigram
ngram <- Trigrams_model[list(W2, W3)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
if(nrow(predict)<6){
##unigram
ngram <- Bigrams_model[list(W3)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
}else if(len==2){
W1 <- str[len-1]; W2 <- str[len]
ngram <- Trigrams_model[list(W1, W2)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
if(nrow(predict)<6){
##unigram
ngram <- Bigrams_model[list(W2)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
}else if(len==1){
W1 <- str[len]
ngram <- Bigrams_model[list(W1)]
predict <- predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
}
if(nrow(predict)<5){
ngram <- Unigrams_model
predict <- rbind(predict, data.frame(ngram$freq,ngram$pred))
predict <- predict[!is.na(predict[,1]),]
predict <- predict[-1,]
}
return(predict)
}
a <- predictWordcloud(
"How are youo")
a
shiny::runApp()
b
wordcloud(b[,2], b[,1],  scale=c(5,1.5),
colors=brewer.pal(4, "Dark2"))
wordcloud(b[,2], b[,1],max.words=1000,  scale=c(5,1.5),
colors=brewer.pal(4, "Dark2"))
shiny::runApp()
- Experience of Application
Data Product
Introduction of SwiftKey Data Product - Typing Prediction
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
